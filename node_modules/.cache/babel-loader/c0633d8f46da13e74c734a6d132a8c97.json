{"ast":null,"code":"var _jsxFileName = \"/home/yasmin/Documentos/workspace/uniao-rio/src/components/HumanitarianMap.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl'; //import Elastic from '@elastic/elasticsearch';\n//const client = new Elastic({ node: 'https://elastic:RMwayjd0u1A7YeQZfLv1wEdY@761fe4305be441e1b752de16019635c9.us-east-1.aws.found.io:9243' })\n//endpoint: https://761fe4305be441e1b752de16019635c9.us-east-1.aws.found.io:9243\n//username: elastic\n//senha: RMwayjd0u1A7YeQZfLv1wEdY\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiaWdvcmNvdXRvIiwiYSI6ImNrOWZudjNtcTAyd3EzbHI3a2ppbnpnemUifQ.D--CSyWyEk70oULTVok7vg';\n\nclass HumanitarianMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -43.2096,\n      lat: -22.9035,\n      zoom: 10\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/light-v9',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    map.on('load', () => {\n      var layers = map.getStyle().layers; // Find the index of the first symbol layer in the map style\n\n      var firstSymbolId;\n\n      for (var i = 0; i < layers.length; i++) {\n        if (layers[i].type === 'symbol') {\n          firstSymbolId = layers[i].id;\n          break;\n        }\n      }\n\n      map.addSource('urban-areas', {\n        'type': 'geojson',\n        'data': 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_urban_areas.geojson'\n      });\n      map.addLayer({\n        'id': 'urban-areas-fill',\n        'type': 'fill',\n        'source': 'urban-areas',\n        'layout': {},\n        'paint': {\n          'fill-color': '#ffa500',\n          'fill-opacity': 0.6\n        },\n        firstSymbolId\n      }); // BOLINHAS!\n\n      map.addSource('earthquakes', {\n        type: 'geojson',\n        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n        data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n        cluster: true,\n        clusterMaxZoom: 14,\n        // Max zoom to cluster points on\n        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n\n      });\n      map.addLayer({\n        id: 'clusters',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        paint: {\n          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n          // with three steps to implement three types of circles:\n          //   * Blue, 20px circles when point count is less than 100\n          //   * Yellow, 30px circles when point count is between 100 and 750\n          //   * Pink, 40px circles when point count is greater than or equal to 750\n          'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n          'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n        }\n      });\n      map.addLayer({\n        id: 'cluster-count',\n        type: 'symbol',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': '{point_count_abbreviated}',\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 12\n        }\n      });\n      map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-radius': 4,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n      map.on('click', 'clusters', function (e) {\n        var features = map.queryRenderedFeatures(e.point, {\n          layers: ['clusters']\n        });\n        var clusterId = features[0].properties.cluster_id;\n        map.getSource('earthquakes').getClusterExpansionZoom(clusterId, function (err, zoom) {\n          if (err) return;\n          map.easeTo({\n            center: features[0].geometry.coordinates,\n            zoom: zoom\n          });\n        });\n      });\n      map.on('click', 'unclustered-point', function (e) {\n        console.log('e', e.features);\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var mag = e.features[0].properties.mag;\n        var tsunami;\n\n        if (e.features[0].properties.tsunami === 1) {\n          tsunami = 'yes';\n        } else {\n          tsunami = 'no';\n        }\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup().setLngLat(coordinates).setHTML('magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami).addTo(map);\n      });\n      map.on('mouseenter', 'clusters', function () {\n        map.getCanvas().style.cursor = 'pointer';\n      });\n      map.on('mouseleave', 'clusters', function () {\n        map.getCanvas().style.cursor = '';\n      });\n    });\n    map.addControl(new mapboxgl.NavigationControl()); //this.queryAll();\n  }\n  /*queryAll = async () => {\n    const { body } = await client.search({\n      index: 'ibge_rj',\n      body: {\n        query: {\n          match: {\n            quote: 'winter'\n          }\n        }\n      }\n    })\n    console.log(body.hits.hits)\n  }*/\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebarStyle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }\n    }, \"Longitude: \", this.state.lng, \" | Latitude: \", this.state.lat, \" | Zoom: \", this.state.zoom)), /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default HumanitarianMap;","map":{"version":3,"sources":["/home/yasmin/Documentos/workspace/uniao-rio/src/components/HumanitarianMap.js"],"names":["React","Component","ReactDOM","mapboxgl","accessToken","HumanitarianMap","constructor","props","state","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","layers","getStyle","firstSymbolId","i","length","type","id","addSource","addLayer","data","cluster","clusterMaxZoom","clusterRadius","source","filter","paint","layout","e","features","queryRenderedFeatures","point","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","easeTo","geometry","coordinates","console","log","slice","mag","tsunami","Math","abs","lngLat","Popup","setLngLat","setHTML","addTo","getCanvas","cursor","addControl","NavigationControl","render","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n\n//import Elastic from '@elastic/elasticsearch';\n//const client = new Elastic({ node: 'https://elastic:RMwayjd0u1A7YeQZfLv1wEdY@761fe4305be441e1b752de16019635c9.us-east-1.aws.found.io:9243' })\n\n//endpoint: https://761fe4305be441e1b752de16019635c9.us-east-1.aws.found.io:9243\n//username: elastic\n//senha: RMwayjd0u1A7YeQZfLv1wEdY\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiaWdvcmNvdXRvIiwiYSI6ImNrOWZudjNtcTAyd3EzbHI3a2ppbnpnemUifQ.D--CSyWyEk70oULTVok7vg';\n\nclass HumanitarianMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -43.2096,\n      lat:  -22.9035,\n      zoom: 10,\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/light-v9',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n\n    map.on('load', () => {\n      var layers = map.getStyle().layers;\n      // Find the index of the first symbol layer in the map style\n      var firstSymbolId;\n      for (var i = 0; i < layers.length; i++) {\n        if (layers[i].type === 'symbol') {\n          firstSymbolId = layers[i].id;\n          break;\n        }\n      }\n\n      map.addSource('urban-areas', {\n        'type': 'geojson',\n        'data': 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_urban_areas.geojson'\n      });\n      map.addLayer({\n        'id': 'urban-areas-fill',\n        'type': 'fill',\n        'source': 'urban-areas',\n        'layout': {},\n        'paint': {\n          'fill-color': '#ffa500',\n          'fill-opacity': 0.6\n        },\n        firstSymbolId\n      });\n      \n\n      // BOLINHAS!\n      map.addSource('earthquakes', {\n        type: 'geojson',\n        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n        data:\n          'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n        cluster: true,\n        clusterMaxZoom: 14, // Max zoom to cluster points on\n        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n      });\n\n      map.addLayer({\n        id: 'clusters',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        paint: {\n          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n          // with three steps to implement three types of circles:\n          //   * Blue, 20px circles when point count is less than 100\n          //   * Yellow, 30px circles when point count is between 100 and 750\n          //   * Pink, 40px circles when point count is greater than or equal to 750\n          'circle-color': [\n            'step',\n            ['get', 'point_count'],\n            '#51bbd6',\n            100,\n            '#f1f075',\n            750,\n            '#f28cb1'\n          ],\n          'circle-radius': [\n            'step',\n            ['get', 'point_count'],\n            20,\n            100,\n            30,\n            750,\n            40\n          ]\n        }\n      });\n\n      map.addLayer({\n        id: 'cluster-count',\n        type: 'symbol',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': '{point_count_abbreviated}',\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 12\n        }\n      });\n\n      map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-radius': 4,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      map.on('click', 'clusters', function (e) {\n        var features = map.queryRenderedFeatures(e.point, {\n          layers: ['clusters']\n        });\n        var clusterId = features[0].properties.cluster_id;\n        map.getSource('earthquakes').getClusterExpansionZoom(\n          clusterId,\n          function (err, zoom) {\n            if (err) return;\n\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom\n            });\n          }\n        );\n      });\n\n      map.on('click', 'unclustered-point', function (e) {\n        console.log('e', e.features)\n\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var mag = e.features[0].properties.mag;\n        var tsunami;\n\n        if (e.features[0].properties.tsunami === 1) {\n          tsunami = 'yes';\n        } else {\n          tsunami = 'no';\n        }\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup()\n          .setLngLat(coordinates)\n          .setHTML(\n            'magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami\n          )\n          .addTo(map);\n      });\n\n      map.on('mouseenter', 'clusters', function () {\n        map.getCanvas().style.cursor = 'pointer';\n      });\n      map.on('mouseleave', 'clusters', function () {\n        map.getCanvas().style.cursor = '';\n      });\n    })\n\n    map.addControl(new mapboxgl.NavigationControl());\n    //this.queryAll();\n  }\n\n  /*queryAll = async () => {\n    const { body } = await client.search({\n      index: 'ibge_rj',\n      body: {\n        query: {\n          match: {\n            quote: 'winter'\n          }\n        }\n      }\n    })\n    console.log(body.hits.hits)\n  }*/\n\n  render() {\n    return (\n      <div>\n        <div>\n          <div className='sidebarStyle'>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n        </div>\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\"/>\n      </div>\n    );\n  }\n}\n\nexport default HumanitarianMap;"]},"metadata":{},"sourceType":"module"}