{"ast":null,"code":"var _jsxFileName = \"/home/yasmin/Documentos/workspace/uniao-rio/src/screens/HumanitarianMap.js\";\n// Libs\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl'; // Components\n\nimport Menu from '../components/Menu'; // Images\n// import MarkerIcon from '../assets/marker.svg';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiaWdvcmNvdXRvIiwiYSI6ImNrOWZudjNtcTAyd3EzbHI3a2ppbnpnemUifQ.D--CSyWyEk70oULTVok7vg';\n\nclass HumanitarianMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -43.2096,\n      lat: -22.9035,\n      zoom: 10\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/igorcouto/ck9mtp0zx384s1jwau5diy2w4/draft',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    }); // MARCADOR!!!\n\n    var marker = new mapboxgl.Marker({\n      draggable: true\n    }).setLngLat([0, 0]).addTo(map);\n\n    function onDragEnd() {\n      var lngLat = marker.getLngLat();\n      const teste = `longitude ${lngLat.lng}, latitude ${lngLat.lat}`;\n      console.log('teste', teste);\n      return teste; // coordinates.style.display = 'block';\n      // coordinates.innerHTML =\n      // 'Longitude: ' + lngLat.lng + '<br />Latitude: ' + lngLat.lat;\n    }\n\n    marker.on('dragend', onDragEnd);\n    map.on('load', () => {\n      // var layers = map.getStyle().layers;\n      // Find the index of the first symbol layer in the map style\n      // var firstSymbolId;\n      // for (var i = 0; i < layers.length; i++) {\n      //   if (layers[i].type === 'symbol') {\n      //     firstSymbolId = layers[i].id;\n      //     break;\n      //   }\n      // }\n      // map.addSource('urban-areas', {\n      //   'type': 'geojson',\n      //   'data': 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_urban_areas.geojson'\n      // });\n      // map.addLayer({\n      //   'id': 'urban-areas-fill',\n      //   'type': 'fill',\n      //   'source': 'urban-areas',\n      //   'layout': {},\n      //   'paint': {\n      //     'fill-color': '#ffa500',\n      //     'fill-opacity': 0.6\n      //   },\n      //   firstSymbolId\n      // });\n      // BOLINHAS!!!\n      map.addSource('earthquakes', {\n        type: 'geojson',\n        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n        data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n        cluster: true,\n        clusterMaxZoom: 14,\n        // Max zoom to cluster points on\n        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n\n      });\n      map.addLayer({\n        id: 'clusters',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        paint: {\n          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n          // with three steps to implement three types of circles:\n          //   * Blue, 20px circles when point count is less than 100\n          //   * Yellow, 30px circles when point count is between 100 and 750\n          //   * Pink, 40px circles when point count is greater than or equal to 750\n          'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n          'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n        }\n      });\n      map.addLayer({\n        id: 'cluster-count',\n        type: 'symbol',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': '{point_count_abbreviated}',\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 12\n        }\n      });\n      map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-radius': 4,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n      map.on('click', 'clusters', function (e) {\n        var features = map.queryRenderedFeatures(e.point, {\n          layers: ['clusters']\n        });\n        var clusterId = features[0].properties.cluster_id;\n        map.getSource('earthquakes').getClusterExpansionZoom(clusterId, function (err, zoom) {\n          if (err) return;\n          map.easeTo({\n            center: features[0].geometry.coordinates,\n            zoom: zoom\n          });\n        });\n      });\n      map.on('click', 'unclustered-point', function (e) {\n        console.log('e', e.features);\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var mag = e.features[0].properties.mag;\n        var tsunami;\n\n        if (e.features[0].properties.tsunami === 1) {\n          tsunami = 'yes';\n        } else {\n          tsunami = 'no';\n        }\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup().setLngLat(coordinates).setHTML('magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami).addTo(map);\n      });\n      map.on('mouseenter', 'clusters', function () {\n        map.getCanvas().style.cursor = 'pointer';\n      });\n      map.on('mouseleave', 'clusters', function () {\n        map.getCanvas().style.cursor = '';\n      });\n    });\n    map.addControl(new mapboxgl.NavigationControl()); //this.queryAll();\n  }\n  /*queryAll = async () => {\n    const { body } = await client.search({\n      index: 'ibge_rj',\n      body: {\n        query: {\n          match: {\n            quote: 'winter'\n          }\n        }\n      }\n    })\n    console.log(body.hits.hits)\n  }*/\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container_map-rio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"map_rio-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, \"riocontra\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"map_rio-text\",\n      style: {\n        color: '#F05123'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, \"corona\")), /*#__PURE__*/React.createElement(Menu, {\n      styles: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        zIndex: 3\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default HumanitarianMap;","map":{"version":3,"sources":["/home/yasmin/Documentos/workspace/uniao-rio/src/screens/HumanitarianMap.js"],"names":["React","Component","mapboxgl","Menu","accessToken","HumanitarianMap","constructor","props","state","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","marker","Marker","draggable","setLngLat","addTo","onDragEnd","lngLat","getLngLat","teste","console","log","addSource","type","data","cluster","clusterMaxZoom","clusterRadius","addLayer","id","source","filter","paint","layout","e","features","queryRenderedFeatures","point","layers","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","easeTo","geometry","coordinates","slice","mag","tsunami","Math","abs","Popup","setHTML","getCanvas","cursor","addControl","NavigationControl","render","color","position","top","left","zIndex","el"],"mappings":"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","sourcesContent":["// Libs\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\n\n// Components\nimport Menu from '../components/Menu'\n\n// Images\n// import MarkerIcon from '../assets/marker.svg';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiaWdvcmNvdXRvIiwiYSI6ImNrOWZudjNtcTAyd3EzbHI3a2ppbnpnemUifQ.D--CSyWyEk70oULTVok7vg';\n\nclass HumanitarianMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -43.2096,\n      lat:  -22.9035,\n      zoom: 10\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/igorcouto/ck9mtp0zx384s1jwau5diy2w4/draft',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n\n    // MARCADOR!!!\n    var marker = new mapboxgl.Marker({\n      draggable: true\n    })\n      .setLngLat([0, 0])\n      .addTo(map);\n      \n    function onDragEnd() {\n      var lngLat = marker.getLngLat();\n\n      const teste = `longitude ${lngLat.lng}, latitude ${lngLat.lat}` \n      console.log('teste', teste)\n      return teste\n\n      // coordinates.style.display = 'block';\n      // coordinates.innerHTML =\n      // 'Longitude: ' + lngLat.lng + '<br />Latitude: ' + lngLat.lat;\n    }\n      \n    marker.on('dragend', onDragEnd);\n\n    map.on('load', () => {\n      // var layers = map.getStyle().layers;\n      // Find the index of the first symbol layer in the map style\n      // var firstSymbolId;\n      // for (var i = 0; i < layers.length; i++) {\n      //   if (layers[i].type === 'symbol') {\n      //     firstSymbolId = layers[i].id;\n      //     break;\n      //   }\n      // }\n\n      // map.addSource('urban-areas', {\n      //   'type': 'geojson',\n      //   'data': 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_urban_areas.geojson'\n      // });\n      // map.addLayer({\n      //   'id': 'urban-areas-fill',\n      //   'type': 'fill',\n      //   'source': 'urban-areas',\n      //   'layout': {},\n      //   'paint': {\n      //     'fill-color': '#ffa500',\n      //     'fill-opacity': 0.6\n      //   },\n      //   firstSymbolId\n      // });\n      \n\n      // BOLINHAS!!!\n      map.addSource('earthquakes', {\n        type: 'geojson',\n        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n        data:\n          'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n        cluster: true,\n        clusterMaxZoom: 14, // Max zoom to cluster points on\n        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n      });\n\n      map.addLayer({\n        id: 'clusters',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        paint: {\n          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n          // with three steps to implement three types of circles:\n          //   * Blue, 20px circles when point count is less than 100\n          //   * Yellow, 30px circles when point count is between 100 and 750\n          //   * Pink, 40px circles when point count is greater than or equal to 750\n          'circle-color': [\n            'step',\n            ['get', 'point_count'],\n            '#51bbd6',\n            100,\n            '#f1f075',\n            750,\n            '#f28cb1'\n          ],\n          'circle-radius': [\n            'step',\n            ['get', 'point_count'],\n            20,\n            100,\n            30,\n            750,\n            40\n          ]\n        }\n      });\n\n      map.addLayer({\n        id: 'cluster-count',\n        type: 'symbol',\n        source: 'earthquakes',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': '{point_count_abbreviated}',\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 12\n        }\n      });\n\n      map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'earthquakes',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-radius': 4,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      map.on('click', 'clusters', function (e) {\n        var features = map.queryRenderedFeatures(e.point, {\n          layers: ['clusters']\n        });\n        var clusterId = features[0].properties.cluster_id;\n        map.getSource('earthquakes').getClusterExpansionZoom(\n          clusterId,\n          function (err, zoom) {\n            if (err) return;\n\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom\n            });\n          }\n        );\n      });\n\n      map.on('click', 'unclustered-point', function (e) {\n        console.log('e', e.features)\n\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var mag = e.features[0].properties.mag;\n        var tsunami;\n\n        if (e.features[0].properties.tsunami === 1) {\n          tsunami = 'yes';\n        } else {\n          tsunami = 'no';\n        }\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup()\n          .setLngLat(coordinates)\n          .setHTML(\n            'magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami\n          )\n          .addTo(map);\n      });\n\n      map.on('mouseenter', 'clusters', function () {\n        map.getCanvas().style.cursor = 'pointer';\n      });\n      map.on('mouseleave', 'clusters', function () {\n        map.getCanvas().style.cursor = '';\n      });\n    })\n\n    map.addControl(new mapboxgl.NavigationControl());\n    //this.queryAll();\n  }\n\n  /*queryAll = async () => {\n    const { body } = await client.search({\n      index: 'ibge_rj',\n      body: {\n        query: {\n          match: {\n            quote: 'winter'\n          }\n        }\n      }\n    })\n    console.log(body.hits.hits)\n  }*/\n\n  render() {\n    return (\n      <div>\n        <div>\n          <div className='container_map-rio'>\n            <p className='map_rio-text'>\n              riocontra\n            </p>\n            <p className='map_rio-text' style={{color: '#F05123'}}>corona</p>\n          </div>\n          {/* <div className='sidebarStyle'>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div> */}\n          <Menu styles={{position: 'absolute', top: 0, left: 0, zIndex: 3}} />\n        </div>\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\"/>\n      </div>\n    );\n  }\n}\n\nexport default HumanitarianMap;"]},"metadata":{},"sourceType":"module"}